# -*- coding: utf-8 -*-
"""build_vocab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFnhVxQ56W8wT9C5Fjt-6Y0rRV_G50KR
"""

import numpy as np
from cyvlfeat.sift.dsift import dsift
from cyvlfeat.kmeans import kmeans
import time
from PIL import Image

import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

def visualize_tsne(centroids, descriptors, num_clusters):

    sample_size = 5000
    indices = np.random.choice(len(descriptors), min(sample_size, len(descriptors)), replace=False)
    selected_features = descriptors[indices]

    # Stack features and centroids for joint visualization
    combined_data = np.vstack([selected_features, centroids])

    # Apply t-SNE for dimensionality reduction
    tsne_model = TSNE(n_components=2, perplexity=30, random_state=42)
    reduced_data = tsne_model.fit_transform(combined_data)

    # Split transformed data back into respective sets
    features_2d = reduced_data[:len(selected_features)]
    centroids_2d = reduced_data[len(selected_features):]

    # Plot the t-SNE results
    plt.figure(figsize=(10, 6))
    plt.scatter(features_2d[:, 0], features_2d[:, 1], color='blue', alpha=0.6, label='Feature Descriptors')
    plt.scatter(centroids_2d[:, 0], centroids_2d[:, 1], color='red', marker='X', s=100, label='Cluster Centroids')
    plt.title(f't-SNE Visualization of SIFT Features (n={len(selected_features)}) & Clusters (k={num_clusters})')
    plt.legend()
    plt.xlabel('t-SNE Dim 1')
    plt.ylabel('t-SNE Dim 2')
    plt.savefig(f'cluster_visualization_{num_clusters}.png', bbox_inches='tight')
    plt.close()

def create_vocabulary(image_files, num_clusters):
    """ Extract SIFT features from images and generate a vocabulary using k-means clustering."""
    feature_list = []
    print("Extracting SIFT descriptors from images...")

    for file in image_files:
        img = Image.open(file).convert('L')  # Convert image to grayscale
        img_array = np.asarray(img, dtype='float32')

        # Compute SIFT descriptors
        _, descriptors = dsift(img_array, step=[5, 5], fast=True)
        feature_list.append(descriptors)

    # Combine all descriptors
    all_descriptors = np.concatenate(feature_list, axis=0).astype('float32')

    print("Performing k-means clustering to create vocabulary...")
    start = time.time()
    cluster_centers = kmeans(all_descriptors, num_clusters, initialization="PLUSPLUS")
    elapsed_time = time.time() - start
    print(f"Vocabulary computed in {elapsed_time:.2f} seconds.")

    visualize_tsne(cluster_centers, all_descriptors, num_clusters)

    return cluster_centers